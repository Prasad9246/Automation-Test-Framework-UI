import unittest
from unittest.mock import patch
from app import app, run_pytest_framework

class AppTestCase(unittest.TestCase):
    def setUp(self):
        app.testing = True
        self.client = app.test_client()

    def test_index(self):
        response = self.client.get('/')
        self.assertEqual(response.status_code, 200)
        self.assertIn(b'index.html', response.data)

    @patch('subprocess.run')
    def test_run_pytest_login(self, mock_run):
        response = self.client.get('/run_pytest?type=login')
        self.assertEqual(response.status_code, 200)
        self.assertTrue(mock_run.called_with(["pytest", "testcases/T1_Login_Pg_Test.py"]))

    @patch('subprocess.run')
    def test_run_pytest_product(self, mock_run):
        response = self.client.get('/run_pytest?type=product')
        self.assertEqual(response.status_code, 200)
        self.assertTrue(mock_run.called_with(["pytest", "testcases/T2_Product_Pg_Test.py"]))

    # Add more test cases for other endpoints and scenarios

if __name__ == '__main__':
    unittest.main()